
class Funcionario {
    constructor(nome, idade, cargo) {
        this.nome = nome;
        this.idade = idade;
        this.cargo = cargo;
    }

    seApresentar() {
        return `Olá, meu nome é ${this.nome}, tenho ${this.idade} anos e trabalho como ${this.cargo}.`;
    }

    trabalhar() {
        return `${this.nome} está trabalhando.`;
    }
}


class Gerente extends Funcionario {
    constructor(nome, idade, cargo, departamento) {
        super(nome, idade, cargo);
        this.departamento = departamento;
    }

    gerenciar() {
        return `${this.nome} está gerenciando o departamento de ${this.departamento}.`;
    }
}


class Desenvolvedor extends Funcionario {
    constructor(nome, idade, cargo, linguagem) {
        super(nome, idade, cargo);
        this.linguagem = linguagem;
    }

    programar() {
        return `${this.nome} está programando em ${this.linguagem}.`;
    }
}


function exibirErro(mensagem) {
    const outputDiv = document.getElementById('output');
    outputDiv.innerHTML = `<p style="color: red;">Erro: ${mensagem}</p>`;
}


document.getElementById('funcionarioForm').addEventListener('submit', function(event) {
    event.preventDefault();

    try {
        const nome = document.getElementById('nome').value;
        const idade = parseInt(document.getElementById('idade').value);
        const cargo = document.getElementById('cargo').value;
        let funcionario;

        if (cargo === 'Gerente') {
            const departamento = document.getElementById('departamento').value;
            funcionario = new Gerente(nome, idade, cargo, departamento);
        } else if (cargo === 'Desenvolvedor') {
            const linguagem = document.getElementById('linguagem').value;
            funcionario = new Desenvoledor(nome, idade, cargo, linguagem);
        } else {
            throw new Error('Cargo inválido.');
        }

        const outputDiv = document.getElementById('output');
        outputDiv.innerHTML = `
            <p>${funcionario.seApresentar()}</p>
            <p>${funcionario.trabalhar()}</p>
            ${funcionario instanceof Gerente ? `<p>${funcionario.gerenciar()}</p>` : ''}
            ${funcionario instanceof Desenvolvedor ? `<p>${funcionario.programar()}</p>` : ''}
        `;
    } catch (error) {
        exibirErro(error.message);
    }
})
